/**
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * PreferencesForm.java
 *
 * Created on Oct 2, 2009, 8:46:52 PM
 */
package net.whn.loki.common;

import java.net.InetAddress;
import java.net.UnknownHostException;
import net.whn.loki.CL.CLHelper;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.whn.loki.common.ICommon.LokiRole;

/**
 *
 * @author daniel
 */
public class PreferencesForm extends LokiForm {

    /** Creates new form PreferencesForm */
    public PreferencesForm(Config c) {
        initComponents();
        cfg = c;

        //general
        updateCacheValues();
        if (cfg.getRole() == LokiRole.ASK) {
            rbtnAskMe.setSelected(true);
        } else if (cfg.getRole() == LokiRole.GRUNT) {
            rbtnGrunt.setSelected(true);
        } else if (cfg.getRole() == LokiRole.MASTER) {
            rbtnMaster.setSelected(true);
        } else if (cfg.getRole() == LokiRole.MASTER_GRUNT) {
            rbtnMasterAndGrunt.setSelected(true);
        } else {
            log.severe("位置角色: " + cfg.getRole());
        }
        
        if(cfg.getAutoFileHandling()) {
            rbtnAutoFile.setSelected(true);
        } else {
            rbtnManualFile.setSelected(true);
            pnlCache.setEnabled(false);
        }
        
      
        //grunt
        txtBlenderBin.setText(cfg.getBlenderBin());
        if(!cfg.getAutoDiscoverMaster()) {
            rbtnManualIP.setSelected(true);
            txtMasterManualIP.setText(cfg.getMasterIp().getHostAddress());
            txtMasterManualIP.setEnabled(true);
        }

        //master
        txtMulticastAddress.setText(cfg.getMulticastAddress().getHostAddress());
        txtMulticastPort.setText(Integer.toString(cfg.getGruntMulticastPort()));
        txtTTL.setText(Integer.toString(cfg.getMulticastTTL()));
        txtAnnounceInterval.setText(Integer.toString(cfg.getAnnounceInterval()));
        txtAcceptPort.setText(Integer.toString(cfg.getConnectPort()));
    }

    public void updateCacheValues() {
        spinnerCacheSizeLimit.setValue(cfg.getCacheSizeLimitMB());
        txtCurrentCacheSize.setText(cfg.getCacheSizeStr());
    }
    
    /**
     * ip地址正则字符串
     */
    private static final String IPADDRESS_PATTERN = 
		"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
    
    /**
     * 正则验证是否为合法ip地址
     * @param ip 待验证数据
     * @return 合法ip
     */
    public static boolean validateIP(final String ip) {
        Pattern pattern = Pattern.compile(IPADDRESS_PATTERN);
        Matcher matcher = pattern.matcher(ip);
        return matcher.matches();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpRole = new javax.swing.ButtonGroup();
        btngrpMasterAddress = new javax.swing.ButtonGroup();
        btngrpFileHandling = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlGeneral = new javax.swing.JPanel();
        pnlRole = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rbtnGrunt = new javax.swing.JRadioButton();
        rbtnMaster = new javax.swing.JRadioButton();
        rbtnMasterAndGrunt = new javax.swing.JRadioButton();
        rbtnAskMe = new javax.swing.JRadioButton();
        pnlCache = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        spinnerCacheSizeLimit = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCurrentCacheSize = new javax.swing.JLabel();
        pnlFileHandling = new javax.swing.JPanel();
        rbtnAutoFile = new javax.swing.JRadioButton();
        rbtnManualFile = new javax.swing.JRadioButton();
        btnFileHelp = new javax.swing.JButton();
        pnlGrunt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtBlenderBin = new javax.swing.JTextField();
        btnBrowseForBlenderBin = new javax.swing.JButton();
        pnlMasterIp = new javax.swing.JPanel();
        rbtnAutoIP = new javax.swing.JRadioButton();
        rbtnManualIP = new javax.swing.JRadioButton();
        txtMasterManualIP = new javax.swing.JTextField();
        pnlMaster = new javax.swing.JPanel();
        pnlNetwork = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMulticastAddress = new javax.swing.JTextField();
        txtMulticastPort = new javax.swing.JTextField();
        txtAcceptPort = new javax.swing.JTextField();
        txtTTL = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtAnnounceInterval = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("首选项");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlGeneral.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        pnlRole.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "角色", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));
        pnlRole.setToolTipText("");

        jLabel1.setText("选择Loki Render启动时的角色");

        btngrpRole.add(rbtnGrunt);
        rbtnGrunt.setText("分支");
        rbtnGrunt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnGruntActionPerformed(evt);
            }
        });

        btngrpRole.add(rbtnMaster);
        rbtnMaster.setText("主干");

        btngrpRole.add(rbtnMasterAndGrunt);
        rbtnMasterAndGrunt.setText("主干和分支");

        btngrpRole.add(rbtnAskMe);
        rbtnAskMe.setFont(null);
        rbtnAskMe.setSelected(true);
        rbtnAskMe.setText("每次询问");

        javax.swing.GroupLayout pnlRoleLayout = new javax.swing.GroupLayout(pnlRole);
        pnlRole.setLayout(pnlRoleLayout);
        pnlRoleLayout.setHorizontalGroup(
            pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlRoleLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnGrunt)
                            .addComponent(rbtnAskMe)
                            .addComponent(rbtnMaster)
                            .addComponent(rbtnMasterAndGrunt))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRoleLayout.setVerticalGroup(
            pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoleLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnAskMe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnGrunt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnMaster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnMasterAndGrunt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCache.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "项目文件缓存", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));

        jLabel2.setText("设置一个目标限值");

        spinnerCacheSizeLimit.setModel(new javax.swing.SpinnerNumberModel(100, 50, 4000, 10));
        spinnerCacheSizeLimit.setToolTipText("Loki将会把缓存大小限定到这个值,除非所有的缓存文件都在被队列使用,在这种情况下缓存将会允许继续增长.");

        jLabel3.setText("MB 缓存空间");

        jLabel7.setText("当前缓存大小:");

        txtCurrentCacheSize.setText("0 MB");
        txtCurrentCacheSize.setToolTipText("缓存值将会超过目标限值如果缓存文件一直被队列任务使用时.");

        javax.swing.GroupLayout pnlCacheLayout = new javax.swing.GroupLayout(pnlCache);
        pnlCache.setLayout(pnlCacheLayout);
        pnlCacheLayout.setHorizontalGroup(
            pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCacheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCacheLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCacheSizeLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(pnlCacheLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCurrentCacheSize)))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        pnlCacheLayout.setVerticalGroup(
            pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCacheLayout.createSequentialGroup()
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerCacheSizeLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCurrentCacheSize))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pnlFileHandling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "文件自动传输和缓存", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));

        btngrpFileHandling.add(rbtnAutoFile);
        rbtnAutoFile.setSelected(true);
        rbtnAutoFile.setText("启用");
        rbtnAutoFile.setToolTipText("Loki在需要的节点间自动传输和缓存文件. \n在大多数情况正是你需要.");
        rbtnAutoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAutoFileActionPerformed(evt);
            }
        });

        btngrpFileHandling.add(rbtnManualFile);
        rbtnManualFile.setText("禁用");
        rbtnManualFile.setToolTipText("在这种模式下你需要配置一个网络共享. 适用于较大的项目.");
        rbtnManualFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnManualFileActionPerformed(evt);
            }
        });

        btnFileHelp.setText("帮助");
        btnFileHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFileHandlingLayout = new javax.swing.GroupLayout(pnlFileHandling);
        pnlFileHandling.setLayout(pnlFileHandlingLayout);
        pnlFileHandlingLayout.setHorizontalGroup(
            pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                        .addComponent(rbtnAutoFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFileHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                        .addComponent(rbtnManualFile)
                        .addGap(0, 501, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlFileHandlingLayout.setVerticalGroup(
            pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                .addGroup(pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnAutoFile)
                    .addComponent(btnFileHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnManualFile)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlGeneralLayout = new javax.swing.GroupLayout(pnlGeneral);
        pnlGeneral.setLayout(pnlGeneralLayout);
        pnlGeneralLayout.setHorizontalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCache, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlRole, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFileHandling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlGeneralLayout.setVerticalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFileHandling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("普通", pnlGeneral);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Blender", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));

        jLabel9.setText("Blender可行性程序路径:");

        txtBlenderBin.setToolTipText("loki作为分支运行时需要知道blender可执行程序的路径");

        btnBrowseForBlenderBin.setText("浏览");
        btnBrowseForBlenderBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseForBlenderBinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBlenderBin, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(btnBrowseForBlenderBin, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBlenderBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBrowseForBlenderBin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMasterIp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "主干IP地址", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));
        pnlMasterIp.setToolTipText("重启loki分支以使设置生效");

        btngrpMasterAddress.add(rbtnAutoIP);
        rbtnAutoIP.setSelected(true);
        rbtnAutoIP.setText("自动发现地址");
        rbtnAutoIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAutoIPActionPerformed(evt);
            }
        });

        btngrpMasterAddress.add(rbtnManualIP);
        rbtnManualIP.setText("手动制定地址");
        rbtnManualIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnManualIPActionPerformed(evt);
            }
        });

        txtMasterManualIP.setEnabled(false);

        javax.swing.GroupLayout pnlMasterIpLayout = new javax.swing.GroupLayout(pnlMasterIp);
        pnlMasterIp.setLayout(pnlMasterIpLayout);
        pnlMasterIpLayout.setHorizontalGroup(
            pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterIpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtnAutoIP)
                    .addComponent(rbtnManualIP)
                    .addComponent(txtMasterManualIP, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMasterIpLayout.setVerticalGroup(
            pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterIpLayout.createSequentialGroup()
                .addComponent(rbtnAutoIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnManualIP)
                .addGap(18, 18, 18)
                .addComponent(txtMasterManualIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlGruntLayout = new javax.swing.GroupLayout(pnlGrunt);
        pnlGrunt.setLayout(pnlGruntLayout);
        pnlGruntLayout.setHorizontalGroup(
            pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGruntLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMasterIp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlGruntLayout.setVerticalGroup(
            pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGruntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMasterIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pnlMasterIp.getAccessibleContext().setAccessibleName("");
        pnlMasterIp.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("本地分支", pnlGrunt);

        pnlNetwork.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "网络设置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null));
        pnlNetwork.setToolTipText("网络设置现在不会更改");

        jLabel4.setText("组播地址:");

        jLabel5.setText("广播端口:");

        jLabel6.setText("接收端口:");

        txtMulticastAddress.setToolTipText("这个多播地址用于主干在网络上广播自身的地址. 分支监听这个地址来发现主干.");
        txtMulticastAddress.setEnabled(false);

        txtMulticastPort.setToolTipText("端口用于多播地址通信.");
        txtMulticastPort.setEnabled(false);
        txtMulticastPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMulticastPortActionPerformed(evt);
            }
        });

        txtAcceptPort.setToolTipText("分支和主干建立连接的端口.");
        txtAcceptPort.setEnabled(false);

        txtTTL.setToolTipText("多播的存活时间. 值'1' 将会只在本地网络有效. ");
        txtTTL.setEnabled(false);

        jLabel8.setText("广播TTL:");

        jLabel10.setText("广播间隔 (ms):");

        txtAnnounceInterval.setToolTipText("主干广播的时间间隔.");
        txtAnnounceInterval.setEnabled(false);

        javax.swing.GroupLayout pnlNetworkLayout = new javax.swing.GroupLayout(pnlNetwork);
        pnlNetwork.setLayout(pnlNetworkLayout);
        pnlNetworkLayout.setHorizontalGroup(
            pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMulticastAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtAcceptPort, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtAnnounceInterval, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtTTL, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMulticastPort, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlNetworkLayout.setVerticalGroup(
            pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNetworkLayout.createSequentialGroup()
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMulticastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMulticastPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtAnnounceInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAcceptPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMasterLayout = new javax.swing.GroupLayout(pnlMaster);
        pnlMaster.setLayout(pnlMasterLayout);
        pnlMasterLayout.setHorizontalGroup(
            pnlMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMasterLayout.setVerticalGroup(
            pnlMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("本地主干", pnlMaster);

        btnCancel.setText("取消");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("保存");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel11.setFont(null);
        jLabel11.setText("点击保存后重启Loki以使所有设置生效.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnGruntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnGruntActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnGruntActionPerformed

    private void txtMulticastPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMulticastPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMulticastPortActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        boolean valid = true;
        String mistakeStr = null;
        if (!CLHelper.isBlenderExe(txtBlenderBin.getText())) {
            valid = false;
            mistakeStr = "'" + txtBlenderBin.getText() +
                        "' 不是一个合法的Blender \n" + "可执行程序.";
                
        }

        //Grunt
        
        //General
        if (rbtnAskMe.isSelected()) {
            cfg.setRole(LokiRole.ASK);
        } else if (rbtnGrunt.isSelected()) {
            cfg.setRole(LokiRole.GRUNT);
        } else if (rbtnMaster.isSelected()) {
            cfg.setRole(LokiRole.MASTER);
        } else if (rbtnMasterAndGrunt.isSelected()) {
            cfg.setRole(LokiRole.MASTER_GRUNT);
        } else {
            log.severe("选择了意外的角色状态");
        }
        
        cfg.setCacheSizeLimitMB((Integer) spinnerCacheSizeLimit.getValue());

        //Grunt
        if (rbtnAutoIP.isSelected()) {
            cfg.setAutoDiscoverMaster(true);
        }
        if (rbtnManualIP.isSelected()){
            if(validateIP(txtMasterManualIP.getText())){
               try {
                   InetAddress testy = 
                           InetAddress.getByName(txtMasterManualIP.getText());
                    cfg.setMasterIp(testy);
                    cfg.setAutoDiscoverMaster(false);
                } catch (UnknownHostException uhex) {
                    valid = false;
                    mistakeStr = "请输入一个合法的主IP地址.";
                    rbtnAutoIP.setSelected(true);
                    txtMasterManualIP.setEnabled(false);
                } 
            } else {
                valid = false;
                mistakeStr = "请输入一个合法的主IP地址.";
                rbtnAutoIP.setSelected(true);
                txtMasterManualIP.setEnabled(false);
            }
        }
        
        if(valid){
           cfg.setBlenderBin(txtBlenderBin.getText());
           
           setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, mistakeStr, "注意",
                        JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBrowseForBlenderBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseForBlenderBinActionPerformed
        String blenderBinStr = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("请选择blender的可执行程序");
        if (fileChooser.showDialog(null, "选择") ==
                JFileChooser.APPROVE_OPTION) {
            blenderBinStr = fileChooser.getSelectedFile().getPath();

            if (CLHelper.isBlenderExe(blenderBinStr)) {
                txtBlenderBin.setText(blenderBinStr);
            } else {
                String msg = "'" + blenderBinStr +
                        "' 不是一个合法的Blender \n" + "可执行程序.";
                JOptionPane.showMessageDialog(null, msg, "注意",
                        JOptionPane.WARNING_MESSAGE);

                log.info("不是一个合法的blender可执行程序: " +
                        blenderBinStr);
            }
        }
    }//GEN-LAST:event_btnBrowseForBlenderBinActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void rbtnAutoIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAutoIPActionPerformed
        txtMasterManualIP.setEnabled(false);
    }//GEN-LAST:event_rbtnAutoIPActionPerformed

    private void rbtnManualIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnManualIPActionPerformed
        txtMasterManualIP.setEnabled(true);
    }//GEN-LAST:event_rbtnManualIPActionPerformed

    private void rbtnAutoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAutoFileActionPerformed
        cfg.setAutoFileHandling(true);
        pnlCache.setEnabled(true);
        jLabel2.setEnabled(true);
        spinnerCacheSizeLimit.setEnabled(true);
        jLabel3.setEnabled(true);
        jLabel7.setEnabled(true);
        txtCurrentCacheSize.setEnabled(true);
    }//GEN-LAST:event_rbtnAutoFileActionPerformed

    private void rbtnManualFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnManualFileActionPerformed
        cfg.setAutoFileHandling(false);
        pnlCache.setEnabled(false);
        jLabel2.setEnabled(false);
        spinnerCacheSizeLimit.setEnabled(false);
        jLabel3.setEnabled(false);
        jLabel7.setEnabled(false);
        txtCurrentCacheSize.setEnabled(false);
    }//GEN-LAST:event_rbtnManualFileActionPerformed

    private void btnFileHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileHelpActionPerformed
        String msg =
                "   如果启用, Loki将会自动传输blend文件到分支, 将然后将\n" +
                "渲染结果发送回主干.在这种模式下你需要将你的贴图和项目\n" + 
                "文件一起打包到blend文件中.此外, 文件缓存在分支上, 因\n" +
                "此频繁使用的文件将会从缓存获取而不是每次需要它们时访问\n" +
                "网络 .Loki足够敏捷来通知分支当blend文件改变时, 尽管\n" +
                "文件名字是相同的, 然后将会发送最新的版本到分支.通常情况\n" +
                "下你希望这个功能启用, 但是在某些情况下, 这并不理想, \n" +
                "比如你有一个包含很多文件的大项目, loki将会发送大量时\n" +
                "间来发送文件, 缓存它们, 等等,并且你将会在每一个分支\n" +
                "缓存中复制所有项目文件而结束 .在这种情况下选择 '禁用'\n" +
                "然后设置一个所有电脑都可访问的网络共享(需支持双向读写!),\n" +
                "然后把项目文件放到这个共享中. 然后每一个节点的Loki的\n" +
                "项目路径都要指向这一个中心位置.\n" +
                "\n" +
                "   设置共享有许多方式:Windows共享,NFS,或者SSHFS有一些\n" +
                "例子.更先进的分布式文件系统比如GPFS或者Lustre也可以使用.\n" +
                "\n" +
                "   最重要的! - 当我们设置'禁用' 时你必须确保所有运行\n" +
                "loki的电脑都有准确吸纳共同的项目文件路径!\n"+
                "例如, 如果你运行在工作站, 你的项目路径可以是:\n" +
                "X:\\projects\\blender\\projectx\\\n" +
                "或者你的所有电脑运行在linux, 项目路径可以是:\n" +
                "/var/projects/blender/projectx/\n";
                JOptionPane.showMessageDialog(null, msg, "关于文件管理",
                        JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnFileHelpActionPerformed
    private final Config cfg;
    //logging
    private static final String className = "net.whn.loki.common.PreferencesForm";
    private static final Logger log = Logger.getLogger(className);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseForBlenderBin;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFileHelp;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup btngrpFileHandling;
    private javax.swing.ButtonGroup btngrpMasterAddress;
    private javax.swing.ButtonGroup btngrpRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlCache;
    private javax.swing.JPanel pnlFileHandling;
    private javax.swing.JPanel pnlGeneral;
    private javax.swing.JPanel pnlGrunt;
    private javax.swing.JPanel pnlMaster;
    private javax.swing.JPanel pnlMasterIp;
    private javax.swing.JPanel pnlNetwork;
    private javax.swing.JPanel pnlRole;
    private javax.swing.JRadioButton rbtnAskMe;
    private javax.swing.JRadioButton rbtnAutoFile;
    private javax.swing.JRadioButton rbtnAutoIP;
    private javax.swing.JRadioButton rbtnGrunt;
    private javax.swing.JRadioButton rbtnManualFile;
    private javax.swing.JRadioButton rbtnManualIP;
    private javax.swing.JRadioButton rbtnMaster;
    private javax.swing.JRadioButton rbtnMasterAndGrunt;
    private javax.swing.JSpinner spinnerCacheSizeLimit;
    private javax.swing.JTextField txtAcceptPort;
    private javax.swing.JTextField txtAnnounceInterval;
    private javax.swing.JTextField txtBlenderBin;
    private javax.swing.JLabel txtCurrentCacheSize;
    private javax.swing.JTextField txtMasterManualIP;
    private javax.swing.JTextField txtMulticastAddress;
    private javax.swing.JTextField txtMulticastPort;
    private javax.swing.JTextField txtTTL;
    // End of variables declaration//GEN-END:variables
}
